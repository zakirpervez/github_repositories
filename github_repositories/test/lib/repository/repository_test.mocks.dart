// Mocks generated by Mockito 5.4.4 from annotations
// in github_repositories/test/lib/repository/repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:github_repositories/database/app_database.dart' as _i9;
import 'package:github_repositories/database/local_service.dart' as _i8;
import 'package:github_repositories/remote/api_service.dart' as _i2;
import 'package:github_repositories/remote/entities/commits.dart' as _i7;
import 'package:github_repositories/remote/entities/repository.dart' as _i5;
import 'package:github_repositories/wrappers/data_wrapper.dart' as _i4;
import 'package:github_repositories/wrappers/isolate_service_wrapper.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupHeader() => super.noSuchMethod(
        Invocation.method(
          #setupHeader,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i4.DataWrapper<List<_i5.Repository>>> fetchRepositories() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRepositories,
          [],
        ),
        returnValue: _i3.Future<_i4.DataWrapper<List<_i5.Repository>>>.value(
            _i6.dummyValue<_i4.DataWrapper<List<_i5.Repository>>>(
          this,
          Invocation.method(
            #fetchRepositories,
            [],
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<List<_i5.Repository>>>);

  @override
  _i3.Future<_i4.DataWrapper<List<_i7.Commits>>> fetchCommits(
          String? repoName) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommits,
          [repoName],
        ),
        returnValue: _i3.Future<_i4.DataWrapper<List<_i7.Commits>>>.value(
            _i6.dummyValue<_i4.DataWrapper<List<_i7.Commits>>>(
          this,
          Invocation.method(
            #fetchCommits,
            [repoName],
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<List<_i7.Commits>>>);
}

/// A class which mocks [LocalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalService extends _i1.Mock implements _i8.LocalService {
  MockLocalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> saveOrUpdateAuditData(_i9.AuditCompanion? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveOrUpdateAuditData,
          [entry],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> saveAudit(_i9.AuditCompanion? entry) => (super.noSuchMethod(
        Invocation.method(
          #saveAudit,
          [entry],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> deleteAllRepositories() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllRepositories,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i9.AuditData?> getAuditRecord(
    String? apiEndPoint,
    String? nodeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuditRecord,
          [
            apiEndPoint,
            nodeId,
          ],
        ),
        returnValue: _i3.Future<_i9.AuditData?>.value(),
      ) as _i3.Future<_i9.AuditData?>);

  @override
  _i3.Future<List<_i9.AuditData>> getCommitRecordByApiEndPointNameAndNodeId(
    String? apiName,
    String? repoNodeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommitRecordByApiEndPointNameAndNodeId,
          [
            apiName,
            repoNodeId,
          ],
        ),
        returnValue: _i3.Future<List<_i9.AuditData>>.value(<_i9.AuditData>[]),
      ) as _i3.Future<List<_i9.AuditData>>);

  @override
  _i3.Future<void> saveRepositories(
          List<_i9.RepositoryCompanion>? repositories) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRepositories,
          [repositories],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i9.RepositoryData>> getAllRepositories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRepositories,
          [],
        ),
        returnValue:
            _i3.Future<List<_i9.RepositoryData>>.value(<_i9.RepositoryData>[]),
      ) as _i3.Future<List<_i9.RepositoryData>>);

  @override
  _i3.Future<void> saveCommits(List<_i9.CommitCompanion>? entries) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCommits,
          [entries],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i9.CommitData>> getCommitsByRepositoryNodeId(
          String? repositoryNodeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommitsByRepositoryNodeId,
          [repositoryNodeId],
        ),
        returnValue: _i3.Future<List<_i9.CommitData>>.value(<_i9.CommitData>[]),
      ) as _i3.Future<List<_i9.CommitData>>);

  @override
  _i3.Future<void> deleteCommitsByNodeId(String? repositoryNodeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCommitsByNodeId,
          [repositoryNodeId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [IsolateServiceWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsolateServiceWrapper extends _i1.Mock
    implements _i10.IsolateServiceWrapper {
  MockIsolateServiceWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.DataWrapper<List<_i7.Commits>?>> fetchCommitsInIsolate(
          {required String? repoName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommitsInIsolate,
          [],
          {#repoName: repoName},
        ),
        returnValue: _i3.Future<_i4.DataWrapper<List<_i7.Commits>?>>.value(
            _i6.dummyValue<_i4.DataWrapper<List<_i7.Commits>?>>(
          this,
          Invocation.method(
            #fetchCommitsInIsolate,
            [],
            {#repoName: repoName},
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<List<_i7.Commits>?>>);
}
