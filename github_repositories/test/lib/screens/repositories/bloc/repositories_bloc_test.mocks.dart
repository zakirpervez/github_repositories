// Mocks generated by Mockito 5.4.4 from annotations
// in github_repositories/test/lib/screens/repositories/bloc/repositories_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:github_repositories/database/app_database.dart' as _i6;
import 'package:github_repositories/repository/repository.dart' as _i2;
import 'package:github_repositories/screen/repositories/use_cases/fetch_repositories_use_case.dart'
    as _i3;
import 'package:github_repositories/wrappers/data_wrapper.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepositoryService_0 extends _i1.SmartFake
    implements _i2.RepositoryService {
  _FakeRepositoryService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchRepositoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchRepositoriesUseCase extends _i1.Mock
    implements _i3.FetchRepositoriesUseCase {
  MockFetchRepositoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepositoryService_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.RepositoryService);

  @override
  _i4.Future<_i5.DataWrapper<List<_i6.RepositoryData>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i4.Future<_i5.DataWrapper<List<_i6.RepositoryData>>>.value(
                _i7.dummyValue<_i5.DataWrapper<List<_i6.RepositoryData>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i5.DataWrapper<List<_i6.RepositoryData>>>);
}
