// Mocks generated by Mockito 5.4.4 from annotations
// in github_repositories/test/lib/screens/repositories/use_case/fetch_repositories_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:github_repositories/database/app_database.dart' as _i7;
import 'package:github_repositories/remote/entities/commits.dart' as _i8;
import 'package:github_repositories/remote/entities/repository.dart' as _i5;
import 'package:github_repositories/repository/repository.dart' as _i2;
import 'package:github_repositories/wrappers/data_wrapper.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryService extends _i1.Mock implements _i2.RepositoryService {
  MockRepositoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.DataWrapper<List<_i5.Repository>>>
      fetchRepositoriesFromApi() => (super.noSuchMethod(
            Invocation.method(
              #fetchRepositoriesFromApi,
              [],
            ),
            returnValue:
                _i3.Future<_i4.DataWrapper<List<_i5.Repository>>>.value(
                    _i6.dummyValue<_i4.DataWrapper<List<_i5.Repository>>>(
              this,
              Invocation.method(
                #fetchRepositoriesFromApi,
                [],
              ),
            )),
          ) as _i3.Future<_i4.DataWrapper<List<_i5.Repository>>>);

  @override
  _i3.Future<void> saveOrUpdateAuditData(
    String? endPoint, [
    String? nodeId,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveOrUpdateAuditData,
          [
            endPoint,
            nodeId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.DataWrapper<_i7.AuditData>> getAuditData(
    String? endPoint, [
    String? nodeId,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuditData,
          [
            endPoint,
            nodeId,
          ],
        ),
        returnValue: _i3.Future<_i4.DataWrapper<_i7.AuditData>>.value(
            _i6.dummyValue<_i4.DataWrapper<_i7.AuditData>>(
          this,
          Invocation.method(
            #getAuditData,
            [
              endPoint,
              nodeId,
            ],
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<_i7.AuditData>>);

  @override
  _i3.Future<void> saveRepositoriesToLocal(
          List<_i5.Repository>? repositories) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRepositoriesToLocal,
          [repositories],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.DataWrapper<List<_i7.RepositoryData>>>
      fetchRepositoriesFromLocal() => (super.noSuchMethod(
            Invocation.method(
              #fetchRepositoriesFromLocal,
              [],
            ),
            returnValue:
                _i3.Future<_i4.DataWrapper<List<_i7.RepositoryData>>>.value(
                    _i6.dummyValue<_i4.DataWrapper<List<_i7.RepositoryData>>>(
              this,
              Invocation.method(
                #fetchRepositoriesFromLocal,
                [],
              ),
            )),
          ) as _i3.Future<_i4.DataWrapper<List<_i7.RepositoryData>>>);

  @override
  _i3.Future<void> deleteAllRepositories() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllRepositories,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.DataWrapper<List<_i8.Commits>>> fetchCommitFromApi(
          _i7.RepositoryData? repository) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommitFromApi,
          [repository],
        ),
        returnValue: _i3.Future<_i4.DataWrapper<List<_i8.Commits>>>.value(
            _i6.dummyValue<_i4.DataWrapper<List<_i8.Commits>>>(
          this,
          Invocation.method(
            #fetchCommitFromApi,
            [repository],
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<List<_i8.Commits>>>);

  @override
  _i3.Future<_i4.DataWrapper<List<_i7.CommitData>>> fetchCommitsFromLocal(
          String? repositoryNodeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommitsFromLocal,
          [repositoryNodeId],
        ),
        returnValue: _i3.Future<_i4.DataWrapper<List<_i7.CommitData>>>.value(
            _i6.dummyValue<_i4.DataWrapper<List<_i7.CommitData>>>(
          this,
          Invocation.method(
            #fetchCommitsFromLocal,
            [repositoryNodeId],
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<List<_i7.CommitData>>>);

  @override
  _i3.Future<void> saveCommitsToLocal(
    List<_i8.Commits>? commits,
    String? repositoryName,
    String? repositoryNodeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCommitsToLocal,
          [
            commits,
            repositoryName,
            repositoryNodeId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveNewAuditForCommit(
    String? endPoint,
    String? repositoryNodeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNewAuditForCommit,
          [
            endPoint,
            repositoryNodeId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i7.AuditData>> getCommitRecordByApiEndPointNameAndNodeId(
    String? apiEndPoint,
    String? repositoryNodeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommitRecordByApiEndPointNameAndNodeId,
          [
            apiEndPoint,
            repositoryNodeId,
          ],
        ),
        returnValue: _i3.Future<List<_i7.AuditData>>.value(<_i7.AuditData>[]),
      ) as _i3.Future<List<_i7.AuditData>>);

  @override
  _i3.Future<void> deleteCommitsByNodeId(String? repositoryNodeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCommitsByNodeId,
          [repositoryNodeId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.DataWrapper<List<_i8.Commits>?>> fetchIsolatedCommit(
          String? repositoryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchIsolatedCommit,
          [repositoryName],
        ),
        returnValue: _i3.Future<_i4.DataWrapper<List<_i8.Commits>?>>.value(
            _i6.dummyValue<_i4.DataWrapper<List<_i8.Commits>?>>(
          this,
          Invocation.method(
            #fetchIsolatedCommit,
            [repositoryName],
          ),
        )),
      ) as _i3.Future<_i4.DataWrapper<List<_i8.Commits>?>>);
}
